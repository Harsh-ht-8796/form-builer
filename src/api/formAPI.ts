/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Form API
 * API for creating and managing forms
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  DeleteApiV1UsersDeleteProfileImage200,
  DeleteUserResponse,
  Form,
  FormRequest,
  FormResponse,
  FormSubmissionResponse,
  GetApiV1FormsFormIdVisibility200,
  GetApiV1FormsReceivedParams,
  GetApiV1FormsSearch200,
  GetApiV1FormsSearchParams,
  GetApiV1SubmissionsFormFormIdFieldsParams,
  GetApiV1SubmissionsFormFormIdFieldsQuestionParams,
  GetApiV1SubmissionsFormIdIndividualParams,
  GetApiV1SubmissionsSummaryParams,
  GetApiV1Users200,
  GetApiV1UsersByOrgParams,
  GetApiV1UsersId200,
  GetOrganizationByIdResponse,
  GetSubmissionsByFieldResponse,
  OrganizationDetail,
  OrganizationUpdateRequest,
  OverviewCardsResponse,
  PostApiV1FormsUploadImagesId201,
  PostApiV1FormsUploadImagesIdBody,
  PostApiV1OrganizationsUserInvite201,
  PostApiV1OrganizationsUserInviteBody,
  PostApiV1SubmissionsFormFormId200,
  PostApiV1SubmissionsFormFormIdBody,
  PostApiV1UsersChangePassword200,
  PostApiV1UsersChangePasswordBody,
  PostApiV1UsersUploadImages201,
  PostApiV1UsersUploadImagesBody,
  PutApiV1FormsFormIdUpdateVisibilityBody,
  PutApiV1Users200,
  ReceivedFormsResponse,
  RegisterRequest,
  RegisterResponse,
  SubmissionResponse,
  SubmissionsSummaryResponse,
  User,
  UserRolesResponse,
  UsersByOrgResponse,
} from "./model";

import { customInstance } from "./mutator/custom-instance";
import type { ErrorType } from "./mutator/custom-instance";
import { customFormData } from "./mutator/formDataMutator";
/**
 * Creates a new form with the specified details
 * @summary Create a new form
 */
export const postApiV1Forms = (
  formRequest: FormRequest,
  signal?: AbortSignal,
) => {
  return customInstance<FormResponse>({
    url: `/api/v1/forms`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: formRequest,
    signal,
  });
};

export const getPostApiV1FormsMutationOptions = <
  TError = ErrorType<null | null>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Forms>>,
    TError,
    { data: FormRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Forms>>,
  TError,
  { data: FormRequest },
  TContext
> => {
  const mutationKey = ["postApiV1Forms"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Forms>>,
    { data: FormRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1Forms(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1FormsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Forms>>
>;
export type PostApiV1FormsMutationBody = FormRequest;
export type PostApiV1FormsMutationError = ErrorType<null | null>;

/**
 * @summary Create a new form
 */
export const usePostApiV1Forms = <
  TError = ErrorType<null | null>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiV1Forms>>,
      TError,
      { data: FormRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1Forms>>,
  TError,
  { data: FormRequest },
  TContext
> => {
  const mutationOptions = getPostApiV1FormsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Get a form by its ID
 * @summary Get Form by ID
 */
export const getApiV1FormsId = (id: string, signal?: AbortSignal) => {
  return customInstance<Form>({
    url: `/api/v1/forms/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1FormsIdQueryKey = (id?: string) => {
  return [`/api/v1/forms/${id}`] as const;
};

export const getGetApiV1FormsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1FormsId>>,
  TError = ErrorType<null | null>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1FormsId>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1FormsIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1FormsId>>> = ({
    signal,
  }) => getApiV1FormsId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1FormsId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiV1FormsIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1FormsId>>
>;
export type GetApiV1FormsIdQueryError = ErrorType<null | null>;

export function useGetApiV1FormsId<
  TData = Awaited<ReturnType<typeof getApiV1FormsId>>,
  TError = ErrorType<null | null>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1FormsId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1FormsId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1FormsId>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiV1FormsId<
  TData = Awaited<ReturnType<typeof getApiV1FormsId>>,
  TError = ErrorType<null | null>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1FormsId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1FormsId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1FormsId>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiV1FormsId<
  TData = Awaited<ReturnType<typeof getApiV1FormsId>>,
  TError = ErrorType<null | null>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1FormsId>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Form by ID
 */

export function useGetApiV1FormsId<
  TData = Awaited<ReturnType<typeof getApiV1FormsId>>,
  TError = ErrorType<null | null>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1FormsId>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiV1FormsIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Delete a form by its ID
 * @summary Delete Form by ID
 */
export const deleteApiV1FormsId = (id: string) => {
  return customInstance<Form>({ url: `/api/v1/forms/${id}`, method: "DELETE" });
};

export const getDeleteApiV1FormsIdMutationOptions = <
  TError = ErrorType<null | null>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1FormsId>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1FormsId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["deleteApiV1FormsId"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1FormsId>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV1FormsId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1FormsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1FormsId>>
>;

export type DeleteApiV1FormsIdMutationError = ErrorType<null | null>;

/**
 * @summary Delete Form by ID
 */
export const useDeleteApiV1FormsId = <
  TError = ErrorType<null | null>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteApiV1FormsId>>,
      TError,
      { id: string },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV1FormsId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteApiV1FormsIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Get a form by its ID
 * @summary Get Form by ID
 */
export const putApiV1FormsId = (id: string, formRequest: FormRequest) => {
  return customInstance<FormResponse>({
    url: `/api/v1/forms/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: formRequest,
  });
};

export const getPutApiV1FormsIdMutationOptions = <
  TError = ErrorType<null | null>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1FormsId>>,
    TError,
    { id: string; data: FormRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1FormsId>>,
  TError,
  { id: string; data: FormRequest },
  TContext
> => {
  const mutationKey = ["putApiV1FormsId"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1FormsId>>,
    { id: string; data: FormRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV1FormsId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1FormsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1FormsId>>
>;
export type PutApiV1FormsIdMutationBody = FormRequest;
export type PutApiV1FormsIdMutationError = ErrorType<null | null>;

/**
 * @summary Get Form by ID
 */
export const usePutApiV1FormsId = <
  TError = ErrorType<null | null>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putApiV1FormsId>>,
      TError,
      { id: string; data: FormRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof putApiV1FormsId>>,
  TError,
  { id: string; data: FormRequest },
  TContext
> => {
  const mutationOptions = getPutApiV1FormsIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Get a form by its ID
 * @summary Get Form by ID
 */
export const getApiV1FormsIdUserView = (id: string, signal?: AbortSignal) => {
  return customInstance<Form>({
    url: `/api/v1/forms/${id}/user-view`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1FormsIdUserViewQueryKey = (id?: string) => {
  return [`/api/v1/forms/${id}/user-view`] as const;
};

export const getGetApiV1FormsIdUserViewQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1FormsIdUserView>>,
  TError = ErrorType<null | null>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1FormsIdUserView>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1FormsIdUserViewQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1FormsIdUserView>>
  > = ({ signal }) => getApiV1FormsIdUserView(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1FormsIdUserView>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiV1FormsIdUserViewQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1FormsIdUserView>>
>;
export type GetApiV1FormsIdUserViewQueryError = ErrorType<null | null>;

export function useGetApiV1FormsIdUserView<
  TData = Awaited<ReturnType<typeof getApiV1FormsIdUserView>>,
  TError = ErrorType<null | null>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1FormsIdUserView>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1FormsIdUserView>>,
          TError,
          Awaited<ReturnType<typeof getApiV1FormsIdUserView>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiV1FormsIdUserView<
  TData = Awaited<ReturnType<typeof getApiV1FormsIdUserView>>,
  TError = ErrorType<null | null>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1FormsIdUserView>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1FormsIdUserView>>,
          TError,
          Awaited<ReturnType<typeof getApiV1FormsIdUserView>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiV1FormsIdUserView<
  TData = Awaited<ReturnType<typeof getApiV1FormsIdUserView>>,
  TError = ErrorType<null | null>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1FormsIdUserView>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Form by ID
 */

export function useGetApiV1FormsIdUserView<
  TData = Awaited<ReturnType<typeof getApiV1FormsIdUserView>>,
  TError = ErrorType<null | null>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1FormsIdUserView>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiV1FormsIdUserViewQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Search forms by status with pagination.
 * @summary Search forms
 */
export const getApiV1FormsSearch = (
  params?: GetApiV1FormsSearchParams,
  signal?: AbortSignal,
) => {
  return customInstance<GetApiV1FormsSearch200>({
    url: `/api/v1/forms/search`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV1FormsSearchQueryKey = (
  params?: GetApiV1FormsSearchParams,
) => {
  return [`/api/v1/forms/search`, ...(params ? [params] : [])] as const;
};

export const getGetApiV1FormsSearchQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1FormsSearch>>,
  TError = ErrorType<null>,
>(
  params?: GetApiV1FormsSearchParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1FormsSearch>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1FormsSearchQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1FormsSearch>>
  > = ({ signal }) => getApiV1FormsSearch(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1FormsSearch>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiV1FormsSearchQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1FormsSearch>>
>;
export type GetApiV1FormsSearchQueryError = ErrorType<null>;

export function useGetApiV1FormsSearch<
  TData = Awaited<ReturnType<typeof getApiV1FormsSearch>>,
  TError = ErrorType<null>,
>(
  params: undefined | GetApiV1FormsSearchParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1FormsSearch>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1FormsSearch>>,
          TError,
          Awaited<ReturnType<typeof getApiV1FormsSearch>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiV1FormsSearch<
  TData = Awaited<ReturnType<typeof getApiV1FormsSearch>>,
  TError = ErrorType<null>,
>(
  params?: GetApiV1FormsSearchParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1FormsSearch>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1FormsSearch>>,
          TError,
          Awaited<ReturnType<typeof getApiV1FormsSearch>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiV1FormsSearch<
  TData = Awaited<ReturnType<typeof getApiV1FormsSearch>>,
  TError = ErrorType<null>,
>(
  params?: GetApiV1FormsSearchParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1FormsSearch>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Search forms
 */

export function useGetApiV1FormsSearch<
  TData = Awaited<ReturnType<typeof getApiV1FormsSearch>>,
  TError = ErrorType<null>,
>(
  params?: GetApiV1FormsSearchParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1FormsSearch>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiV1FormsSearchQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Uploads one or both images (`coverImage`, `logoImage`) to a form by ID. Accepts multipart/form-data.
 * @summary Upload cover and logo images
 */
export const postApiV1FormsUploadImagesId = (
  id: string,
  postApiV1FormsUploadImagesIdBody: PostApiV1FormsUploadImagesIdBody,
  signal?: AbortSignal,
) => {
  const formData = customFormData(postApiV1FormsUploadImagesIdBody);
  return customInstance<PostApiV1FormsUploadImagesId201>({
    url: `/api/v1/forms/upload-images/${id}`,
    method: "POST",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
    signal,
  });
};

export const getPostApiV1FormsUploadImagesIdMutationOptions = <
  TError = ErrorType<null | null | null>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1FormsUploadImagesId>>,
    TError,
    { id: string; data: PostApiV1FormsUploadImagesIdBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1FormsUploadImagesId>>,
  TError,
  { id: string; data: PostApiV1FormsUploadImagesIdBody },
  TContext
> => {
  const mutationKey = ["postApiV1FormsUploadImagesId"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1FormsUploadImagesId>>,
    { id: string; data: PostApiV1FormsUploadImagesIdBody }
  > = (props) => {
    const { id, data } = props ?? {};

    return postApiV1FormsUploadImagesId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1FormsUploadImagesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1FormsUploadImagesId>>
>;
export type PostApiV1FormsUploadImagesIdMutationBody =
  PostApiV1FormsUploadImagesIdBody;
export type PostApiV1FormsUploadImagesIdMutationError = ErrorType<
  null | null | null
>;

/**
 * @summary Upload cover and logo images
 */
export const usePostApiV1FormsUploadImagesId = <
  TError = ErrorType<null | null | null>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiV1FormsUploadImagesId>>,
      TError,
      { id: string; data: PostApiV1FormsUploadImagesIdBody },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1FormsUploadImagesId>>,
  TError,
  { id: string; data: PostApiV1FormsUploadImagesIdBody },
  TContext
> => {
  const mutationOptions =
    getPostApiV1FormsUploadImagesIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Creates a new user account with email, username, password, and roles.
 * @summary Register a new user
 */
export const postApiV1AuthRegister = (
  registerRequest: RegisterRequest,
  signal?: AbortSignal,
) => {
  return customInstance<RegisterResponse>({
    url: `/api/v1/auth/register`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: registerRequest,
    signal,
  });
};

export const getPostApiV1AuthRegisterMutationOptions = <
  TError = ErrorType<null>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1AuthRegister>>,
    TError,
    { data: RegisterRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1AuthRegister>>,
  TError,
  { data: RegisterRequest },
  TContext
> => {
  const mutationKey = ["postApiV1AuthRegister"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1AuthRegister>>,
    { data: RegisterRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1AuthRegister(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1AuthRegisterMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1AuthRegister>>
>;
export type PostApiV1AuthRegisterMutationBody = RegisterRequest;
export type PostApiV1AuthRegisterMutationError = ErrorType<null>;

/**
 * @summary Register a new user
 */
export const usePostApiV1AuthRegister = <
  TError = ErrorType<null>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiV1AuthRegister>>,
      TError,
      { data: RegisterRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1AuthRegister>>,
  TError,
  { data: RegisterRequest },
  TContext
> => {
  const mutationOptions = getPostApiV1AuthRegisterMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary Get available user roles
 */
export const getApiV1UsersRoles = (signal?: AbortSignal) => {
  return customInstance<UserRolesResponse>({
    url: `/api/v1/users/roles`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1UsersRolesQueryKey = () => {
  return [`/api/v1/users/roles`] as const;
};

export const getGetApiV1UsersRolesQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1UsersRoles>>,
  TError = ErrorType<null>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1UsersRoles>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1UsersRolesQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1UsersRoles>>
  > = ({ signal }) => getApiV1UsersRoles(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1UsersRoles>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiV1UsersRolesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1UsersRoles>>
>;
export type GetApiV1UsersRolesQueryError = ErrorType<null>;

export function useGetApiV1UsersRoles<
  TData = Awaited<ReturnType<typeof getApiV1UsersRoles>>,
  TError = ErrorType<null>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1UsersRoles>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1UsersRoles>>,
          TError,
          Awaited<ReturnType<typeof getApiV1UsersRoles>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiV1UsersRoles<
  TData = Awaited<ReturnType<typeof getApiV1UsersRoles>>,
  TError = ErrorType<null>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1UsersRoles>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1UsersRoles>>,
          TError,
          Awaited<ReturnType<typeof getApiV1UsersRoles>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiV1UsersRoles<
  TData = Awaited<ReturnType<typeof getApiV1UsersRoles>>,
  TError = ErrorType<null>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1UsersRoles>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get available user roles
 */

export function useGetApiV1UsersRoles<
  TData = Awaited<ReturnType<typeof getApiV1UsersRoles>>,
  TError = ErrorType<null>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1UsersRoles>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiV1UsersRolesQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Allows an organization admin to invite one or more users by email and assign roles.
 * @summary Invite users to an organization
 */
export const postApiV1OrganizationsUserInvite = (
  postApiV1OrganizationsUserInviteBody: PostApiV1OrganizationsUserInviteBody,
  signal?: AbortSignal,
) => {
  return customInstance<PostApiV1OrganizationsUserInvite201>({
    url: `/api/v1/organizations/user-invite`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: postApiV1OrganizationsUserInviteBody,
    signal,
  });
};

export const getPostApiV1OrganizationsUserInviteMutationOptions = <
  TError = ErrorType<null | null>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1OrganizationsUserInvite>>,
    TError,
    { data: PostApiV1OrganizationsUserInviteBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1OrganizationsUserInvite>>,
  TError,
  { data: PostApiV1OrganizationsUserInviteBody },
  TContext
> => {
  const mutationKey = ["postApiV1OrganizationsUserInvite"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1OrganizationsUserInvite>>,
    { data: PostApiV1OrganizationsUserInviteBody }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1OrganizationsUserInvite(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1OrganizationsUserInviteMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1OrganizationsUserInvite>>
>;
export type PostApiV1OrganizationsUserInviteMutationBody =
  PostApiV1OrganizationsUserInviteBody;
export type PostApiV1OrganizationsUserInviteMutationError = ErrorType<
  null | null
>;

/**
 * @summary Invite users to an organization
 */
export const usePostApiV1OrganizationsUserInvite = <
  TError = ErrorType<null | null>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiV1OrganizationsUserInvite>>,
      TError,
      { data: PostApiV1OrganizationsUserInviteBody },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1OrganizationsUserInvite>>,
  TError,
  { data: PostApiV1OrganizationsUserInviteBody },
  TContext
> => {
  const mutationOptions =
    getPostApiV1OrganizationsUserInviteMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary Get users by organization
 */
export const getApiV1UsersByOrg = (
  params?: GetApiV1UsersByOrgParams,
  signal?: AbortSignal,
) => {
  return customInstance<UsersByOrgResponse>({
    url: `/api/v1/users/by-org`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV1UsersByOrgQueryKey = (
  params?: GetApiV1UsersByOrgParams,
) => {
  return [`/api/v1/users/by-org`, ...(params ? [params] : [])] as const;
};

export const getGetApiV1UsersByOrgQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1UsersByOrg>>,
  TError = ErrorType<null>,
>(
  params?: GetApiV1UsersByOrgParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1UsersByOrg>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1UsersByOrgQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1UsersByOrg>>
  > = ({ signal }) => getApiV1UsersByOrg(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1UsersByOrg>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiV1UsersByOrgQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1UsersByOrg>>
>;
export type GetApiV1UsersByOrgQueryError = ErrorType<null>;

export function useGetApiV1UsersByOrg<
  TData = Awaited<ReturnType<typeof getApiV1UsersByOrg>>,
  TError = ErrorType<null>,
>(
  params: undefined | GetApiV1UsersByOrgParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1UsersByOrg>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1UsersByOrg>>,
          TError,
          Awaited<ReturnType<typeof getApiV1UsersByOrg>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiV1UsersByOrg<
  TData = Awaited<ReturnType<typeof getApiV1UsersByOrg>>,
  TError = ErrorType<null>,
>(
  params?: GetApiV1UsersByOrgParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1UsersByOrg>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1UsersByOrg>>,
          TError,
          Awaited<ReturnType<typeof getApiV1UsersByOrg>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiV1UsersByOrg<
  TData = Awaited<ReturnType<typeof getApiV1UsersByOrg>>,
  TError = ErrorType<null>,
>(
  params?: GetApiV1UsersByOrgParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1UsersByOrg>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get users by organization
 */

export function useGetApiV1UsersByOrg<
  TData = Awaited<ReturnType<typeof getApiV1UsersByOrg>>,
  TError = ErrorType<null>,
>(
  params?: GetApiV1UsersByOrgParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1UsersByOrg>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiV1UsersByOrgQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Delete a user
 */
export const deleteApiV1UsersId = (id: string) => {
  return customInstance<DeleteUserResponse>({
    url: `/api/v1/users/${id}`,
    method: "DELETE",
  });
};

export const getDeleteApiV1UsersIdMutationOptions = <
  TError = ErrorType<null | null>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1UsersId>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1UsersId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["deleteApiV1UsersId"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1UsersId>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV1UsersId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1UsersIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1UsersId>>
>;

export type DeleteApiV1UsersIdMutationError = ErrorType<null | null>;

/**
 * @summary Delete a user
 */
export const useDeleteApiV1UsersId = <
  TError = ErrorType<null | null>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteApiV1UsersId>>,
      TError,
      { id: string },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV1UsersId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteApiV1UsersIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary Get user details by ID
 */
export const getApiV1UsersId = (id: string, signal?: AbortSignal) => {
  return customInstance<GetApiV1UsersId200>({
    url: `/api/v1/users/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1UsersIdQueryKey = (id?: string) => {
  return [`/api/v1/users/${id}`] as const;
};

export const getGetApiV1UsersIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1UsersId>>,
  TError = ErrorType<null | null>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1UsersId>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1UsersIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1UsersId>>> = ({
    signal,
  }) => getApiV1UsersId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1UsersId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiV1UsersIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1UsersId>>
>;
export type GetApiV1UsersIdQueryError = ErrorType<null | null>;

export function useGetApiV1UsersId<
  TData = Awaited<ReturnType<typeof getApiV1UsersId>>,
  TError = ErrorType<null | null>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1UsersId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1UsersId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1UsersId>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiV1UsersId<
  TData = Awaited<ReturnType<typeof getApiV1UsersId>>,
  TError = ErrorType<null | null>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1UsersId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1UsersId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1UsersId>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiV1UsersId<
  TData = Awaited<ReturnType<typeof getApiV1UsersId>>,
  TError = ErrorType<null | null>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1UsersId>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get user details by ID
 */

export function useGetApiV1UsersId<
  TData = Awaited<ReturnType<typeof getApiV1UsersId>>,
  TError = ErrorType<null | null>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1UsersId>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiV1UsersIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get user details by ID
 */
export const getApiV1Users = (signal?: AbortSignal) => {
  return customInstance<GetApiV1Users200>({
    url: `/api/v1/users`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1UsersQueryKey = () => {
  return [`/api/v1/users`] as const;
};

export const getGetApiV1UsersQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Users>>,
  TError = ErrorType<null | null>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Users>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1UsersQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Users>>> = ({
    signal,
  }) => getApiV1Users(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Users>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiV1UsersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Users>>
>;
export type GetApiV1UsersQueryError = ErrorType<null | null>;

export function useGetApiV1Users<
  TData = Awaited<ReturnType<typeof getApiV1Users>>,
  TError = ErrorType<null | null>,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Users>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Users>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Users>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiV1Users<
  TData = Awaited<ReturnType<typeof getApiV1Users>>,
  TError = ErrorType<null | null>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Users>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Users>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Users>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiV1Users<
  TData = Awaited<ReturnType<typeof getApiV1Users>>,
  TError = ErrorType<null | null>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Users>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get user details by ID
 */

export function useGetApiV1Users<
  TData = Awaited<ReturnType<typeof getApiV1Users>>,
  TError = ErrorType<null | null>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Users>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiV1UsersQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get user details by ID
 */
export const putApiV1Users = (user: User) => {
  return customInstance<PutApiV1Users200>({
    url: `/api/v1/users`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: user,
  });
};

export const getPutApiV1UsersMutationOptions = <
  TError = ErrorType<null | null>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1Users>>,
    TError,
    { data: User },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1Users>>,
  TError,
  { data: User },
  TContext
> => {
  const mutationKey = ["putApiV1Users"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1Users>>,
    { data: User }
  > = (props) => {
    const { data } = props ?? {};

    return putApiV1Users(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1UsersMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1Users>>
>;
export type PutApiV1UsersMutationBody = User;
export type PutApiV1UsersMutationError = ErrorType<null | null>;

/**
 * @summary Get user details by ID
 */
export const usePutApiV1Users = <
  TError = ErrorType<null | null>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putApiV1Users>>,
      TError,
      { data: User },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof putApiV1Users>>,
  TError,
  { data: User },
  TContext
> => {
  const mutationOptions = getPutApiV1UsersMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Updates the details of an existing organization.
 * @summary Update Organization
 */
export const putApiV1Organizations = (
  organizationUpdateRequest: OrganizationUpdateRequest,
) => {
  return customInstance<OrganizationDetail>({
    url: `/api/v1/organizations`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: organizationUpdateRequest,
  });
};

export const getPutApiV1OrganizationsMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1Organizations>>,
    TError,
    { data: OrganizationUpdateRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1Organizations>>,
  TError,
  { data: OrganizationUpdateRequest },
  TContext
> => {
  const mutationKey = ["putApiV1Organizations"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1Organizations>>,
    { data: OrganizationUpdateRequest }
  > = (props) => {
    const { data } = props ?? {};

    return putApiV1Organizations(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1OrganizationsMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1Organizations>>
>;
export type PutApiV1OrganizationsMutationBody = OrganizationUpdateRequest;
export type PutApiV1OrganizationsMutationError = ErrorType<unknown>;

/**
 * @summary Update Organization
 */
export const usePutApiV1Organizations = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putApiV1Organizations>>,
      TError,
      { data: OrganizationUpdateRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof putApiV1Organizations>>,
  TError,
  { data: OrganizationUpdateRequest },
  TContext
> => {
  const mutationOptions = getPutApiV1OrganizationsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary Get organization details by ID
 */
export const getApiV1OrganizationsMe = (signal?: AbortSignal) => {
  return customInstance<GetOrganizationByIdResponse>({
    url: `/api/v1/organizations/me`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1OrganizationsMeQueryKey = () => {
  return [`/api/v1/organizations/me`] as const;
};

export const getGetApiV1OrganizationsMeQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1OrganizationsMe>>,
  TError = ErrorType<null | null>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1OrganizationsMe>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1OrganizationsMeQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1OrganizationsMe>>
  > = ({ signal }) => getApiV1OrganizationsMe(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1OrganizationsMe>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiV1OrganizationsMeQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1OrganizationsMe>>
>;
export type GetApiV1OrganizationsMeQueryError = ErrorType<null | null>;

export function useGetApiV1OrganizationsMe<
  TData = Awaited<ReturnType<typeof getApiV1OrganizationsMe>>,
  TError = ErrorType<null | null>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1OrganizationsMe>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1OrganizationsMe>>,
          TError,
          Awaited<ReturnType<typeof getApiV1OrganizationsMe>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiV1OrganizationsMe<
  TData = Awaited<ReturnType<typeof getApiV1OrganizationsMe>>,
  TError = ErrorType<null | null>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1OrganizationsMe>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1OrganizationsMe>>,
          TError,
          Awaited<ReturnType<typeof getApiV1OrganizationsMe>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiV1OrganizationsMe<
  TData = Awaited<ReturnType<typeof getApiV1OrganizationsMe>>,
  TError = ErrorType<null | null>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1OrganizationsMe>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get organization details by ID
 */

export function useGetApiV1OrganizationsMe<
  TData = Awaited<ReturnType<typeof getApiV1OrganizationsMe>>,
  TError = ErrorType<null | null>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1OrganizationsMe>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiV1OrganizationsMeQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Returns the profile details of the currently authenticated user.
 * @summary Get current authenticated user's profile
 */
export const getApiV1UsersMe = (signal?: AbortSignal) => {
  return customInstance<User>({
    url: `/api/v1/users/me`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1UsersMeQueryKey = () => {
  return [`/api/v1/users/me`] as const;
};

export const getGetApiV1UsersMeQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1UsersMe>>,
  TError = ErrorType<null>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1UsersMe>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1UsersMeQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1UsersMe>>> = ({
    signal,
  }) => getApiV1UsersMe(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1UsersMe>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiV1UsersMeQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1UsersMe>>
>;
export type GetApiV1UsersMeQueryError = ErrorType<null>;

export function useGetApiV1UsersMe<
  TData = Awaited<ReturnType<typeof getApiV1UsersMe>>,
  TError = ErrorType<null>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1UsersMe>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1UsersMe>>,
          TError,
          Awaited<ReturnType<typeof getApiV1UsersMe>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiV1UsersMe<
  TData = Awaited<ReturnType<typeof getApiV1UsersMe>>,
  TError = ErrorType<null>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1UsersMe>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1UsersMe>>,
          TError,
          Awaited<ReturnType<typeof getApiV1UsersMe>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiV1UsersMe<
  TData = Awaited<ReturnType<typeof getApiV1UsersMe>>,
  TError = ErrorType<null>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1UsersMe>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get current authenticated user's profile
 */

export function useGetApiV1UsersMe<
  TData = Awaited<ReturnType<typeof getApiV1UsersMe>>,
  TError = ErrorType<null>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1UsersMe>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiV1UsersMeQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Uploads one or both images (`coverImage`, `logoImage`) to a form by ID. Accepts multipart/form-data.
 * @summary Upload cover and logo images
 */
export const postApiV1UsersUploadImages = (
  postApiV1UsersUploadImagesBody: PostApiV1UsersUploadImagesBody,
  signal?: AbortSignal,
) => {
  const formData = customFormData(postApiV1UsersUploadImagesBody);
  return customInstance<PostApiV1UsersUploadImages201>({
    url: `/api/v1/users/upload-images`,
    method: "POST",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
    signal,
  });
};

export const getPostApiV1UsersUploadImagesMutationOptions = <
  TError = ErrorType<null | null | null>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1UsersUploadImages>>,
    TError,
    { data: PostApiV1UsersUploadImagesBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1UsersUploadImages>>,
  TError,
  { data: PostApiV1UsersUploadImagesBody },
  TContext
> => {
  const mutationKey = ["postApiV1UsersUploadImages"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1UsersUploadImages>>,
    { data: PostApiV1UsersUploadImagesBody }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1UsersUploadImages(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1UsersUploadImagesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1UsersUploadImages>>
>;
export type PostApiV1UsersUploadImagesMutationBody =
  PostApiV1UsersUploadImagesBody;
export type PostApiV1UsersUploadImagesMutationError = ErrorType<
  null | null | null
>;

/**
 * @summary Upload cover and logo images
 */
export const usePostApiV1UsersUploadImages = <
  TError = ErrorType<null | null | null>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiV1UsersUploadImages>>,
      TError,
      { data: PostApiV1UsersUploadImagesBody },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1UsersUploadImages>>,
  TError,
  { data: PostApiV1UsersUploadImagesBody },
  TContext
> => {
  const mutationOptions = getPostApiV1UsersUploadImagesMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Deletes the currently uploaded profile image for the authenticated user.
 * @summary Delete the user's profile image
 */
export const deleteApiV1UsersDeleteProfileImage = () => {
  return customInstance<DeleteApiV1UsersDeleteProfileImage200>({
    url: `/api/v1/users/delete-profile-image`,
    method: "DELETE",
  });
};

export const getDeleteApiV1UsersDeleteProfileImageMutationOptions = <
  TError = ErrorType<null | null>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1UsersDeleteProfileImage>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1UsersDeleteProfileImage>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["deleteApiV1UsersDeleteProfileImage"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1UsersDeleteProfileImage>>,
    void
  > = () => {
    return deleteApiV1UsersDeleteProfileImage();
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1UsersDeleteProfileImageMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1UsersDeleteProfileImage>>
>;

export type DeleteApiV1UsersDeleteProfileImageMutationError = ErrorType<
  null | null
>;

/**
 * @summary Delete the user's profile image
 */
export const useDeleteApiV1UsersDeleteProfileImage = <
  TError = ErrorType<null | null>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteApiV1UsersDeleteProfileImage>>,
      TError,
      void,
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV1UsersDeleteProfileImage>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions =
    getDeleteApiV1UsersDeleteProfileImageMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Allows the authenticated user to change their password by providing the current password and a new password.
 * @summary Change user password
 */
export const postApiV1UsersChangePassword = (
  postApiV1UsersChangePasswordBody: PostApiV1UsersChangePasswordBody,
  signal?: AbortSignal,
) => {
  return customInstance<PostApiV1UsersChangePassword200>({
    url: `/api/v1/users/change-password`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: postApiV1UsersChangePasswordBody,
    signal,
  });
};

export const getPostApiV1UsersChangePasswordMutationOptions = <
  TError = ErrorType<null | null>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1UsersChangePassword>>,
    TError,
    { data: PostApiV1UsersChangePasswordBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1UsersChangePassword>>,
  TError,
  { data: PostApiV1UsersChangePasswordBody },
  TContext
> => {
  const mutationKey = ["postApiV1UsersChangePassword"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1UsersChangePassword>>,
    { data: PostApiV1UsersChangePasswordBody }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1UsersChangePassword(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1UsersChangePasswordMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1UsersChangePassword>>
>;
export type PostApiV1UsersChangePasswordMutationBody =
  PostApiV1UsersChangePasswordBody;
export type PostApiV1UsersChangePasswordMutationError = ErrorType<null | null>;

/**
 * @summary Change user password
 */
export const usePostApiV1UsersChangePassword = <
  TError = ErrorType<null | null>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiV1UsersChangePassword>>,
      TError,
      { data: PostApiV1UsersChangePasswordBody },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1UsersChangePassword>>,
  TError,
  { data: PostApiV1UsersChangePasswordBody },
  TContext
> => {
  const mutationOptions =
    getPostApiV1UsersChangePasswordMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Allows updating visibility settings, allowed domains, and allowed emails for a form.
 * @summary Update form visibility and access settings
 */
export const putApiV1FormsFormIdUpdateVisibility = (
  formId: string,
  putApiV1FormsFormIdUpdateVisibilityBody: PutApiV1FormsFormIdUpdateVisibilityBody,
) => {
  return customInstance<Form>({
    url: `/api/v1/forms/${formId}/update-visibility`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: putApiV1FormsFormIdUpdateVisibilityBody,
  });
};

export const getPutApiV1FormsFormIdUpdateVisibilityMutationOptions = <
  TError = ErrorType<null | null | null>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1FormsFormIdUpdateVisibility>>,
    TError,
    { formId: string; data: PutApiV1FormsFormIdUpdateVisibilityBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1FormsFormIdUpdateVisibility>>,
  TError,
  { formId: string; data: PutApiV1FormsFormIdUpdateVisibilityBody },
  TContext
> => {
  const mutationKey = ["putApiV1FormsFormIdUpdateVisibility"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1FormsFormIdUpdateVisibility>>,
    { formId: string; data: PutApiV1FormsFormIdUpdateVisibilityBody }
  > = (props) => {
    const { formId, data } = props ?? {};

    return putApiV1FormsFormIdUpdateVisibility(formId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1FormsFormIdUpdateVisibilityMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1FormsFormIdUpdateVisibility>>
>;
export type PutApiV1FormsFormIdUpdateVisibilityMutationBody =
  PutApiV1FormsFormIdUpdateVisibilityBody;
export type PutApiV1FormsFormIdUpdateVisibilityMutationError = ErrorType<
  null | null | null
>;

/**
 * @summary Update form visibility and access settings
 */
export const usePutApiV1FormsFormIdUpdateVisibility = <
  TError = ErrorType<null | null | null>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putApiV1FormsFormIdUpdateVisibility>>,
      TError,
      { formId: string; data: PutApiV1FormsFormIdUpdateVisibilityBody },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof putApiV1FormsFormIdUpdateVisibility>>,
  TError,
  { formId: string; data: PutApiV1FormsFormIdUpdateVisibilityBody },
  TContext
> => {
  const mutationOptions =
    getPutApiV1FormsFormIdUpdateVisibilityMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Retrieves the visibility settings and allowed emails for a specific form.
 * @summary Get form visibility settings
 */
export const getApiV1FormsFormIdVisibility = (
  formId: string,
  signal?: AbortSignal,
) => {
  return customInstance<GetApiV1FormsFormIdVisibility200>({
    url: `/api/v1/forms/${formId}/visibility`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1FormsFormIdVisibilityQueryKey = (formId?: string) => {
  return [`/api/v1/forms/${formId}/visibility`] as const;
};

export const getGetApiV1FormsFormIdVisibilityQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1FormsFormIdVisibility>>,
  TError = ErrorType<null | null>,
>(
  formId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1FormsFormIdVisibility>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1FormsFormIdVisibilityQueryKey(formId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1FormsFormIdVisibility>>
  > = ({ signal }) => getApiV1FormsFormIdVisibility(formId, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!formId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1FormsFormIdVisibility>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiV1FormsFormIdVisibilityQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1FormsFormIdVisibility>>
>;
export type GetApiV1FormsFormIdVisibilityQueryError = ErrorType<null | null>;

export function useGetApiV1FormsFormIdVisibility<
  TData = Awaited<ReturnType<typeof getApiV1FormsFormIdVisibility>>,
  TError = ErrorType<null | null>,
>(
  formId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1FormsFormIdVisibility>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1FormsFormIdVisibility>>,
          TError,
          Awaited<ReturnType<typeof getApiV1FormsFormIdVisibility>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiV1FormsFormIdVisibility<
  TData = Awaited<ReturnType<typeof getApiV1FormsFormIdVisibility>>,
  TError = ErrorType<null | null>,
>(
  formId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1FormsFormIdVisibility>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1FormsFormIdVisibility>>,
          TError,
          Awaited<ReturnType<typeof getApiV1FormsFormIdVisibility>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiV1FormsFormIdVisibility<
  TData = Awaited<ReturnType<typeof getApiV1FormsFormIdVisibility>>,
  TError = ErrorType<null | null>,
>(
  formId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1FormsFormIdVisibility>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get form visibility settings
 */

export function useGetApiV1FormsFormIdVisibility<
  TData = Awaited<ReturnType<typeof getApiV1FormsFormIdVisibility>>,
  TError = ErrorType<null | null>,
>(
  formId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1FormsFormIdVisibility>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiV1FormsFormIdVisibilityQueryOptions(
    formId,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Allows submission of form responses. The `data` object contains dynamic keys representing field IDs and their corresponding answers.
 * @summary Submit form data
 */
export const postApiV1SubmissionsFormFormId = (
  formId: string,
  postApiV1SubmissionsFormFormIdBody: PostApiV1SubmissionsFormFormIdBody,
  signal?: AbortSignal,
) => {
  return customInstance<PostApiV1SubmissionsFormFormId200>({
    url: `/api/v1/submissions/form/${formId}`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: postApiV1SubmissionsFormFormIdBody,
    signal,
  });
};

export const getPostApiV1SubmissionsFormFormIdMutationOptions = <
  TError = ErrorType<null | null | null>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1SubmissionsFormFormId>>,
    TError,
    { formId: string; data: PostApiV1SubmissionsFormFormIdBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1SubmissionsFormFormId>>,
  TError,
  { formId: string; data: PostApiV1SubmissionsFormFormIdBody },
  TContext
> => {
  const mutationKey = ["postApiV1SubmissionsFormFormId"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1SubmissionsFormFormId>>,
    { formId: string; data: PostApiV1SubmissionsFormFormIdBody }
  > = (props) => {
    const { formId, data } = props ?? {};

    return postApiV1SubmissionsFormFormId(formId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1SubmissionsFormFormIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1SubmissionsFormFormId>>
>;
export type PostApiV1SubmissionsFormFormIdMutationBody =
  PostApiV1SubmissionsFormFormIdBody;
export type PostApiV1SubmissionsFormFormIdMutationError = ErrorType<
  null | null | null
>;

/**
 * @summary Submit form data
 */
export const usePostApiV1SubmissionsFormFormId = <
  TError = ErrorType<null | null | null>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiV1SubmissionsFormFormId>>,
      TError,
      { formId: string; data: PostApiV1SubmissionsFormFormIdBody },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1SubmissionsFormFormId>>,
  TError,
  { formId: string; data: PostApiV1SubmissionsFormFormIdBody },
  TContext
> => {
  const mutationOptions =
    getPostApiV1SubmissionsFormFormIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Returns a list of forms shared with the authenticated user.
 * @summary Get received forms
 */
export const getApiV1FormsReceived = (
  params?: GetApiV1FormsReceivedParams,
  signal?: AbortSignal,
) => {
  return customInstance<ReceivedFormsResponse>({
    url: `/api/v1/forms/received`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV1FormsReceivedQueryKey = (
  params?: GetApiV1FormsReceivedParams,
) => {
  return [`/api/v1/forms/received`, ...(params ? [params] : [])] as const;
};

export const getGetApiV1FormsReceivedQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1FormsReceived>>,
  TError = ErrorType<null>,
>(
  params?: GetApiV1FormsReceivedParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1FormsReceived>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1FormsReceivedQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1FormsReceived>>
  > = ({ signal }) => getApiV1FormsReceived(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1FormsReceived>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiV1FormsReceivedQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1FormsReceived>>
>;
export type GetApiV1FormsReceivedQueryError = ErrorType<null>;

export function useGetApiV1FormsReceived<
  TData = Awaited<ReturnType<typeof getApiV1FormsReceived>>,
  TError = ErrorType<null>,
>(
  params: undefined | GetApiV1FormsReceivedParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1FormsReceived>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1FormsReceived>>,
          TError,
          Awaited<ReturnType<typeof getApiV1FormsReceived>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiV1FormsReceived<
  TData = Awaited<ReturnType<typeof getApiV1FormsReceived>>,
  TError = ErrorType<null>,
>(
  params?: GetApiV1FormsReceivedParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1FormsReceived>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1FormsReceived>>,
          TError,
          Awaited<ReturnType<typeof getApiV1FormsReceived>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiV1FormsReceived<
  TData = Awaited<ReturnType<typeof getApiV1FormsReceived>>,
  TError = ErrorType<null>,
>(
  params?: GetApiV1FormsReceivedParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1FormsReceived>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get received forms
 */

export function useGetApiV1FormsReceived<
  TData = Awaited<ReturnType<typeof getApiV1FormsReceived>>,
  TError = ErrorType<null>,
>(
  params?: GetApiV1FormsReceivedParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1FormsReceived>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiV1FormsReceivedQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Retrieve a summary of submissions filtered by title and accessibility.
 * @summary Get submissions summary
 */
export const getApiV1SubmissionsSummary = (
  params?: GetApiV1SubmissionsSummaryParams,
  signal?: AbortSignal,
) => {
  return customInstance<SubmissionsSummaryResponse>({
    url: `/api/v1/submissions/summary`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV1SubmissionsSummaryQueryKey = (
  params?: GetApiV1SubmissionsSummaryParams,
) => {
  return [`/api/v1/submissions/summary`, ...(params ? [params] : [])] as const;
};

export const getGetApiV1SubmissionsSummaryQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1SubmissionsSummary>>,
  TError = ErrorType<null>,
>(
  params?: GetApiV1SubmissionsSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1SubmissionsSummary>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1SubmissionsSummaryQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1SubmissionsSummary>>
  > = ({ signal }) => getApiV1SubmissionsSummary(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1SubmissionsSummary>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiV1SubmissionsSummaryQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1SubmissionsSummary>>
>;
export type GetApiV1SubmissionsSummaryQueryError = ErrorType<null>;

export function useGetApiV1SubmissionsSummary<
  TData = Awaited<ReturnType<typeof getApiV1SubmissionsSummary>>,
  TError = ErrorType<null>,
>(
  params: undefined | GetApiV1SubmissionsSummaryParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1SubmissionsSummary>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1SubmissionsSummary>>,
          TError,
          Awaited<ReturnType<typeof getApiV1SubmissionsSummary>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiV1SubmissionsSummary<
  TData = Awaited<ReturnType<typeof getApiV1SubmissionsSummary>>,
  TError = ErrorType<null>,
>(
  params?: GetApiV1SubmissionsSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1SubmissionsSummary>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1SubmissionsSummary>>,
          TError,
          Awaited<ReturnType<typeof getApiV1SubmissionsSummary>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiV1SubmissionsSummary<
  TData = Awaited<ReturnType<typeof getApiV1SubmissionsSummary>>,
  TError = ErrorType<null>,
>(
  params?: GetApiV1SubmissionsSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1SubmissionsSummary>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get submissions summary
 */

export function useGetApiV1SubmissionsSummary<
  TData = Awaited<ReturnType<typeof getApiV1SubmissionsSummary>>,
  TError = ErrorType<null>,
>(
  params?: GetApiV1SubmissionsSummaryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1SubmissionsSummary>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiV1SubmissionsSummaryQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Returns key metrics such as total forms, responses, and average completion rate (private).
 * @summary Get overview cards for submissions
 */
export const getApiV1SubmissionsOverviewCards = (signal?: AbortSignal) => {
  return customInstance<OverviewCardsResponse>({
    url: `/api/v1/submissions/overview-cards`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1SubmissionsOverviewCardsQueryKey = () => {
  return [`/api/v1/submissions/overview-cards`] as const;
};

export const getGetApiV1SubmissionsOverviewCardsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1SubmissionsOverviewCards>>,
  TError = ErrorType<null>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1SubmissionsOverviewCards>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1SubmissionsOverviewCardsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1SubmissionsOverviewCards>>
  > = ({ signal }) => getApiV1SubmissionsOverviewCards(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1SubmissionsOverviewCards>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiV1SubmissionsOverviewCardsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1SubmissionsOverviewCards>>
>;
export type GetApiV1SubmissionsOverviewCardsQueryError = ErrorType<null>;

export function useGetApiV1SubmissionsOverviewCards<
  TData = Awaited<ReturnType<typeof getApiV1SubmissionsOverviewCards>>,
  TError = ErrorType<null>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1SubmissionsOverviewCards>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1SubmissionsOverviewCards>>,
          TError,
          Awaited<ReturnType<typeof getApiV1SubmissionsOverviewCards>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiV1SubmissionsOverviewCards<
  TData = Awaited<ReturnType<typeof getApiV1SubmissionsOverviewCards>>,
  TError = ErrorType<null>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1SubmissionsOverviewCards>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1SubmissionsOverviewCards>>,
          TError,
          Awaited<ReturnType<typeof getApiV1SubmissionsOverviewCards>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiV1SubmissionsOverviewCards<
  TData = Awaited<ReturnType<typeof getApiV1SubmissionsOverviewCards>>,
  TError = ErrorType<null>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1SubmissionsOverviewCards>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get overview cards for submissions
 */

export function useGetApiV1SubmissionsOverviewCards<
  TData = Awaited<ReturnType<typeof getApiV1SubmissionsOverviewCards>>,
  TError = ErrorType<null>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1SubmissionsOverviewCards>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiV1SubmissionsOverviewCardsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get individual submissions for a form
 */
export const getApiV1SubmissionsFormIdIndividual = (
  formId: string,
  params?: GetApiV1SubmissionsFormIdIndividualParams,
  signal?: AbortSignal,
) => {
  return customInstance<SubmissionResponse>({
    url: `/api/v1/submissions/${formId}/individual`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV1SubmissionsFormIdIndividualQueryKey = (
  formId?: string,
  params?: GetApiV1SubmissionsFormIdIndividualParams,
) => {
  return [
    `/api/v1/submissions/${formId}/individual`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiV1SubmissionsFormIdIndividualQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1SubmissionsFormIdIndividual>>,
  TError = ErrorType<unknown>,
>(
  formId: string,
  params?: GetApiV1SubmissionsFormIdIndividualParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1SubmissionsFormIdIndividual>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiV1SubmissionsFormIdIndividualQueryKey(formId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1SubmissionsFormIdIndividual>>
  > = ({ signal }) =>
    getApiV1SubmissionsFormIdIndividual(formId, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!formId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1SubmissionsFormIdIndividual>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiV1SubmissionsFormIdIndividualQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1SubmissionsFormIdIndividual>>
>;
export type GetApiV1SubmissionsFormIdIndividualQueryError = ErrorType<unknown>;

export function useGetApiV1SubmissionsFormIdIndividual<
  TData = Awaited<ReturnType<typeof getApiV1SubmissionsFormIdIndividual>>,
  TError = ErrorType<unknown>,
>(
  formId: string,
  params: undefined | GetApiV1SubmissionsFormIdIndividualParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1SubmissionsFormIdIndividual>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1SubmissionsFormIdIndividual>>,
          TError,
          Awaited<ReturnType<typeof getApiV1SubmissionsFormIdIndividual>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiV1SubmissionsFormIdIndividual<
  TData = Awaited<ReturnType<typeof getApiV1SubmissionsFormIdIndividual>>,
  TError = ErrorType<unknown>,
>(
  formId: string,
  params?: GetApiV1SubmissionsFormIdIndividualParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1SubmissionsFormIdIndividual>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1SubmissionsFormIdIndividual>>,
          TError,
          Awaited<ReturnType<typeof getApiV1SubmissionsFormIdIndividual>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiV1SubmissionsFormIdIndividual<
  TData = Awaited<ReturnType<typeof getApiV1SubmissionsFormIdIndividual>>,
  TError = ErrorType<unknown>,
>(
  formId: string,
  params?: GetApiV1SubmissionsFormIdIndividualParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1SubmissionsFormIdIndividual>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get individual submissions for a form
 */

export function useGetApiV1SubmissionsFormIdIndividual<
  TData = Awaited<ReturnType<typeof getApiV1SubmissionsFormIdIndividual>>,
  TError = ErrorType<unknown>,
>(
  formId: string,
  params?: GetApiV1SubmissionsFormIdIndividualParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1SubmissionsFormIdIndividual>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiV1SubmissionsFormIdIndividualQueryOptions(
    formId,
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Returns submissions for a specific form field, including answers, field details, and pagination metadata.
 * @summary Get submissions by form field
 */
export const getApiV1SubmissionsFormFormIdFields = (
  formId: string,
  params?: GetApiV1SubmissionsFormFormIdFieldsParams,
  signal?: AbortSignal,
) => {
  return customInstance<GetSubmissionsByFieldResponse>({
    url: `/api/v1/submissions/form/${formId}/fields`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV1SubmissionsFormFormIdFieldsQueryKey = (
  formId?: string,
  params?: GetApiV1SubmissionsFormFormIdFieldsParams,
) => {
  return [
    `/api/v1/submissions/form/${formId}/fields`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiV1SubmissionsFormFormIdFieldsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1SubmissionsFormFormIdFields>>,
  TError = ErrorType<unknown>,
>(
  formId: string,
  params?: GetApiV1SubmissionsFormFormIdFieldsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1SubmissionsFormFormIdFields>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiV1SubmissionsFormFormIdFieldsQueryKey(formId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1SubmissionsFormFormIdFields>>
  > = ({ signal }) =>
    getApiV1SubmissionsFormFormIdFields(formId, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!formId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1SubmissionsFormFormIdFields>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiV1SubmissionsFormFormIdFieldsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1SubmissionsFormFormIdFields>>
>;
export type GetApiV1SubmissionsFormFormIdFieldsQueryError = ErrorType<unknown>;

export function useGetApiV1SubmissionsFormFormIdFields<
  TData = Awaited<ReturnType<typeof getApiV1SubmissionsFormFormIdFields>>,
  TError = ErrorType<unknown>,
>(
  formId: string,
  params: undefined | GetApiV1SubmissionsFormFormIdFieldsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1SubmissionsFormFormIdFields>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1SubmissionsFormFormIdFields>>,
          TError,
          Awaited<ReturnType<typeof getApiV1SubmissionsFormFormIdFields>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiV1SubmissionsFormFormIdFields<
  TData = Awaited<ReturnType<typeof getApiV1SubmissionsFormFormIdFields>>,
  TError = ErrorType<unknown>,
>(
  formId: string,
  params?: GetApiV1SubmissionsFormFormIdFieldsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1SubmissionsFormFormIdFields>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1SubmissionsFormFormIdFields>>,
          TError,
          Awaited<ReturnType<typeof getApiV1SubmissionsFormFormIdFields>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiV1SubmissionsFormFormIdFields<
  TData = Awaited<ReturnType<typeof getApiV1SubmissionsFormFormIdFields>>,
  TError = ErrorType<unknown>,
>(
  formId: string,
  params?: GetApiV1SubmissionsFormFormIdFieldsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1SubmissionsFormFormIdFields>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get submissions by form field
 */

export function useGetApiV1SubmissionsFormFormIdFields<
  TData = Awaited<ReturnType<typeof getApiV1SubmissionsFormFormIdFields>>,
  TError = ErrorType<unknown>,
>(
  formId: string,
  params?: GetApiV1SubmissionsFormFormIdFieldsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1SubmissionsFormFormIdFields>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiV1SubmissionsFormFormIdFieldsQueryOptions(
    formId,
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Retrieve form entries or field results with pagination
 */
export const getApiV1SubmissionsFormFormIdFieldsQuestion = (
  formId: string,
  params: GetApiV1SubmissionsFormFormIdFieldsQuestionParams,
  signal?: AbortSignal,
) => {
  return customInstance<FormSubmissionResponse>({
    url: `/api/v1/submissions/form/${formId}/fields/question`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV1SubmissionsFormFormIdFieldsQuestionQueryKey = (
  formId?: string,
  params?: GetApiV1SubmissionsFormFormIdFieldsQuestionParams,
) => {
  return [
    `/api/v1/submissions/form/${formId}/fields/question`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiV1SubmissionsFormFormIdFieldsQuestionQueryOptions = <
  TData = Awaited<
    ReturnType<typeof getApiV1SubmissionsFormFormIdFieldsQuestion>
  >,
  TError = ErrorType<unknown>,
>(
  formId: string,
  params: GetApiV1SubmissionsFormFormIdFieldsQuestionParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1SubmissionsFormFormIdFieldsQuestion>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiV1SubmissionsFormFormIdFieldsQuestionQueryKey(formId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1SubmissionsFormFormIdFieldsQuestion>>
  > = ({ signal }) =>
    getApiV1SubmissionsFormFormIdFieldsQuestion(formId, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!formId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1SubmissionsFormFormIdFieldsQuestion>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiV1SubmissionsFormFormIdFieldsQuestionQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof getApiV1SubmissionsFormFormIdFieldsQuestion>>
  >;
export type GetApiV1SubmissionsFormFormIdFieldsQuestionQueryError =
  ErrorType<unknown>;

export function useGetApiV1SubmissionsFormFormIdFieldsQuestion<
  TData = Awaited<
    ReturnType<typeof getApiV1SubmissionsFormFormIdFieldsQuestion>
  >,
  TError = ErrorType<unknown>,
>(
  formId: string,
  params: GetApiV1SubmissionsFormFormIdFieldsQuestionParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1SubmissionsFormFormIdFieldsQuestion>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof getApiV1SubmissionsFormFormIdFieldsQuestion>
          >,
          TError,
          Awaited<
            ReturnType<typeof getApiV1SubmissionsFormFormIdFieldsQuestion>
          >
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiV1SubmissionsFormFormIdFieldsQuestion<
  TData = Awaited<
    ReturnType<typeof getApiV1SubmissionsFormFormIdFieldsQuestion>
  >,
  TError = ErrorType<unknown>,
>(
  formId: string,
  params: GetApiV1SubmissionsFormFormIdFieldsQuestionParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1SubmissionsFormFormIdFieldsQuestion>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof getApiV1SubmissionsFormFormIdFieldsQuestion>
          >,
          TError,
          Awaited<
            ReturnType<typeof getApiV1SubmissionsFormFormIdFieldsQuestion>
          >
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiV1SubmissionsFormFormIdFieldsQuestion<
  TData = Awaited<
    ReturnType<typeof getApiV1SubmissionsFormFormIdFieldsQuestion>
  >,
  TError = ErrorType<unknown>,
>(
  formId: string,
  params: GetApiV1SubmissionsFormFormIdFieldsQuestionParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1SubmissionsFormFormIdFieldsQuestion>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Retrieve form entries or field results with pagination
 */

export function useGetApiV1SubmissionsFormFormIdFieldsQuestion<
  TData = Awaited<
    ReturnType<typeof getApiV1SubmissionsFormFormIdFieldsQuestion>
  >,
  TError = ErrorType<unknown>,
>(
  formId: string,
  params: GetApiV1SubmissionsFormFormIdFieldsQuestionParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1SubmissionsFormFormIdFieldsQuestion>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getGetApiV1SubmissionsFormFormIdFieldsQuestionQueryOptions(
      formId,
      params,
      options,
    );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
