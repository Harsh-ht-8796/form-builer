/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Form API
 * API for creating and managing forms
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  Form,
  FormRequest,
  FormResponse,
  GetApiV1FormsSearch200,
  GetApiV1FormsSearchParams,
  PostApiV1FormsUploadImagesId201,
  PostApiV1FormsUploadImagesIdBody,
} from "./model";

import { customInstance } from "./mutator/custom-instance";
import type { ErrorType } from "./mutator/custom-instance";
import { customFormData } from "./mutator/formDataMutator";
/**
 * Creates a new form with the specified details
 * @summary Create a new form
 */
export const postApiV1Forms = (
  formRequest: FormRequest,
  signal?: AbortSignal,
) => {
  return customInstance<FormResponse>({
    url: `/api/v1/forms`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: formRequest,
    signal,
  });
};

export const getPostApiV1FormsMutationOptions = <
  TError = ErrorType<null | null>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Forms>>,
    TError,
    { data: FormRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Forms>>,
  TError,
  { data: FormRequest },
  TContext
> => {
  const mutationKey = ["postApiV1Forms"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Forms>>,
    { data: FormRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1Forms(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1FormsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Forms>>
>;
export type PostApiV1FormsMutationBody = FormRequest;
export type PostApiV1FormsMutationError = ErrorType<null | null>;

/**
 * @summary Create a new form
 */
export const usePostApiV1Forms = <
  TError = ErrorType<null | null>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiV1Forms>>,
      TError,
      { data: FormRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1Forms>>,
  TError,
  { data: FormRequest },
  TContext
> => {
  const mutationOptions = getPostApiV1FormsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Get a form by its ID
 * @summary Get Form by ID
 */
export const getApiV1FormsId = (id: string, signal?: AbortSignal) => {
  return customInstance<Form>({
    url: `/api/v1/forms/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1FormsIdQueryKey = (id?: string) => {
  return [`/api/v1/forms/${id}`] as const;
};

export const getGetApiV1FormsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1FormsId>>,
  TError = ErrorType<null | null>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1FormsId>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1FormsIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1FormsId>>> = ({
    signal,
  }) => getApiV1FormsId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1FormsId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiV1FormsIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1FormsId>>
>;
export type GetApiV1FormsIdQueryError = ErrorType<null | null>;

export function useGetApiV1FormsId<
  TData = Awaited<ReturnType<typeof getApiV1FormsId>>,
  TError = ErrorType<null | null>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1FormsId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1FormsId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1FormsId>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiV1FormsId<
  TData = Awaited<ReturnType<typeof getApiV1FormsId>>,
  TError = ErrorType<null | null>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1FormsId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1FormsId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1FormsId>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiV1FormsId<
  TData = Awaited<ReturnType<typeof getApiV1FormsId>>,
  TError = ErrorType<null | null>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1FormsId>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Form by ID
 */

export function useGetApiV1FormsId<
  TData = Awaited<ReturnType<typeof getApiV1FormsId>>,
  TError = ErrorType<null | null>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1FormsId>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiV1FormsIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get a form by its ID
 * @summary Get Form by ID
 */
export const putApiV1FormsId = (id: string, formRequest: FormRequest) => {
  return customInstance<FormResponse>({
    url: `/api/v1/forms/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: formRequest,
  });
};

export const getPutApiV1FormsIdMutationOptions = <
  TError = ErrorType<null | null>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1FormsId>>,
    TError,
    { id: string; data: FormRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1FormsId>>,
  TError,
  { id: string; data: FormRequest },
  TContext
> => {
  const mutationKey = ["putApiV1FormsId"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1FormsId>>,
    { id: string; data: FormRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV1FormsId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1FormsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1FormsId>>
>;
export type PutApiV1FormsIdMutationBody = FormRequest;
export type PutApiV1FormsIdMutationError = ErrorType<null | null>;

/**
 * @summary Get Form by ID
 */
export const usePutApiV1FormsId = <
  TError = ErrorType<null | null>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putApiV1FormsId>>,
      TError,
      { id: string; data: FormRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof putApiV1FormsId>>,
  TError,
  { id: string; data: FormRequest },
  TContext
> => {
  const mutationOptions = getPutApiV1FormsIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Search forms by status with pagination.
 * @summary Search forms
 */
export const getApiV1FormsSearch = (
  params?: GetApiV1FormsSearchParams,
  signal?: AbortSignal,
) => {
  return customInstance<GetApiV1FormsSearch200>({
    url: `/api/v1/forms/search`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV1FormsSearchQueryKey = (
  params?: GetApiV1FormsSearchParams,
) => {
  return [`/api/v1/forms/search`, ...(params ? [params] : [])] as const;
};

export const getGetApiV1FormsSearchQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1FormsSearch>>,
  TError = ErrorType<null>,
>(
  params?: GetApiV1FormsSearchParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1FormsSearch>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1FormsSearchQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1FormsSearch>>
  > = ({ signal }) => getApiV1FormsSearch(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1FormsSearch>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiV1FormsSearchQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1FormsSearch>>
>;
export type GetApiV1FormsSearchQueryError = ErrorType<null>;

export function useGetApiV1FormsSearch<
  TData = Awaited<ReturnType<typeof getApiV1FormsSearch>>,
  TError = ErrorType<null>,
>(
  params: undefined | GetApiV1FormsSearchParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1FormsSearch>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1FormsSearch>>,
          TError,
          Awaited<ReturnType<typeof getApiV1FormsSearch>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiV1FormsSearch<
  TData = Awaited<ReturnType<typeof getApiV1FormsSearch>>,
  TError = ErrorType<null>,
>(
  params?: GetApiV1FormsSearchParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1FormsSearch>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1FormsSearch>>,
          TError,
          Awaited<ReturnType<typeof getApiV1FormsSearch>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiV1FormsSearch<
  TData = Awaited<ReturnType<typeof getApiV1FormsSearch>>,
  TError = ErrorType<null>,
>(
  params?: GetApiV1FormsSearchParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1FormsSearch>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Search forms
 */

export function useGetApiV1FormsSearch<
  TData = Awaited<ReturnType<typeof getApiV1FormsSearch>>,
  TError = ErrorType<null>,
>(
  params?: GetApiV1FormsSearchParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1FormsSearch>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiV1FormsSearchQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Uploads one or both images (`coverImage`, `logoImage`) to a form by ID. Accepts multipart/form-data.
 * @summary Upload cover and logo images
 */
export const postApiV1FormsUploadImagesId = (
  id: string,
  postApiV1FormsUploadImagesIdBody: PostApiV1FormsUploadImagesIdBody,
  signal?: AbortSignal,
) => {
  const formData = customFormData(postApiV1FormsUploadImagesIdBody);
  return customInstance<PostApiV1FormsUploadImagesId201>({
    url: `/api/v1/forms/upload-images/${id}`,
    method: "POST",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
    signal,
  });
};

export const getPostApiV1FormsUploadImagesIdMutationOptions = <
  TError = ErrorType<null | null | null>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1FormsUploadImagesId>>,
    TError,
    { id: string; data: PostApiV1FormsUploadImagesIdBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1FormsUploadImagesId>>,
  TError,
  { id: string; data: PostApiV1FormsUploadImagesIdBody },
  TContext
> => {
  const mutationKey = ["postApiV1FormsUploadImagesId"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1FormsUploadImagesId>>,
    { id: string; data: PostApiV1FormsUploadImagesIdBody }
  > = (props) => {
    const { id, data } = props ?? {};

    return postApiV1FormsUploadImagesId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1FormsUploadImagesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1FormsUploadImagesId>>
>;
export type PostApiV1FormsUploadImagesIdMutationBody =
  PostApiV1FormsUploadImagesIdBody;
export type PostApiV1FormsUploadImagesIdMutationError = ErrorType<
  null | null | null
>;

/**
 * @summary Upload cover and logo images
 */
export const usePostApiV1FormsUploadImagesId = <
  TError = ErrorType<null | null | null>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiV1FormsUploadImagesId>>,
      TError,
      { id: string; data: PostApiV1FormsUploadImagesIdBody },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1FormsUploadImagesId>>,
  TError,
  { id: string; data: PostApiV1FormsUploadImagesIdBody },
  TContext
> => {
  const mutationOptions =
    getPostApiV1FormsUploadImagesIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
